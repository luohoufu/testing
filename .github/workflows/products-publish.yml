name: Products Publish

env:
  GO_VERSION: ${{ vars.GO_VERSION }}
  NODEJS_VERSION: ${{ vars.NODEJS_VERSION }}
  PUBLISH_VERSION: ${{ inputs.PUBLISH_VERSION || vars.PUBLISH_VERSION }}
  
on:
  push:
  schedule:
    - cron: '15 16 * * *'
  workflow_dispatch:
    inputs:
      PUBLISH_VERSION:
        description: 'Publish Version'
        required: false
        default: ""
      PUBLISH_RELEASE:
        description: 'Publish Release?'
        required: false
        type: boolean
        default: true
      AGENT_PUBLISH:
        description: 'Run Agent Publish?'
        required: false
        type: boolean
        default: true
      CONSOLE_PUBLISH:
        description: 'Run Console Publish?'
        required: false
        type: boolean
        default: true
      GATEWAY_PUBLISH:
        description: 'Run Gateway Publish?'
        required: false
        type: boolean
        default: true
      LOADGEN_PUBLISH:
        description: 'Run Loadgen Publish?'
        required: false
        type: boolean
        default: true

jobs:
  publish:
    name: Publish ${{ matrix.product }} with ${{ matrix.target }}
    if : ${{ inputs.AGENT_PUBLISH || true }} 
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        product: [agent]
        target: [build-win-amd64,build-win-386,build-linux-amd64,build-linux-386,build-linux-mips64,build-linux-mips64le,build-linux-armv6,build-linux-armv7,build-linux-arm64,build-linux-loong64,build-linux-riscv64,build-darwin-amd64,build-darwin-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout framework code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/framework
          ref: main
          path: framework

      - name: Checkout framework vendor code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/framework-vendor
          ref: main
          path: vendor

      - name: Checkout ${{ matrix.product }} code
        uses: actions/checkout@v4
        with: 
          repository: ${{ vars.GIT_REPO }}/${{ matrix.product }}
          ref: main
          path: ${{ matrix.product }}

      - name: Set up and check env
        run: |
          source $GITHUB_WORKSPACE/scripts/env.sh
          echo WORK=$WORK >> $GITHUB_ENV
          echo WORKBASE=$WORKBASE >> $GITHUB_ENV
          echo PNAME=${{ matrix.product }} >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Set up go toolchain
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: false
          cache: true

      - name: Check go toolchain
        run: go version
                      
      - name: Preper build code
        if: ${{ inputs.PUBLISH_VERSION !='' || vars.PUBLISH_VERSION !='' }}
        run: |
          cd $WORK/$PNAME
          echo "Build $PNAME at $PWD"
          PUBLISH_RELEASE="${{ inputs.PUBLISH_RELEASE || vars.PUBLISH_RELEASE || 'FALSE' }}"
          if [[ "$(echo "$PUBLISH_RELEASE" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            if [[ "$PUBLISH_VERSION" == *-* ]]; then
              IFS=- read -r DYNAMIC_VERSION DYNAMIC_BUILD_NUMBER <<< "$PUBLISH_VERSION"
            else
              RUN_NUMBER=${{ github.run_number }}
              OFFSET=${{ vars.OFFSET }}
              DYNAMIC_BUILD_NUMBER=$((RUN_NUMBER + OFFSET))
              DYNAMIC_VERSION="$PUBLISH_VERSION"
            fi
          else
            DYNAMIC_BUILD_NUMBER=$(date +%Y%m%d)
            DYNAMIC_VERSION=$(echo "$PUBLISH_VERSION" | awk -F. -v OFS=. '{ $3 = $3 + 1; print $1, $2, $3 "_NIGHTLY" }')
          fi
          echo "Build $PNAME with $DYNAMIC_VERSION-$DYNAMIC_BUILD_NUMBER"

          echo VERSION=$DYNAMIC_VERSION >> $GITHUB_ENV
          echo BUILD_NUMBER=$DYNAMIC_BUILD_NUMBER >> $GITHUB_ENV
          echo EOL=${{ vars.EOL }} >> $GITHUB_ENV
          echo BUILD_DATE=$(date +"%Y-%m-%d %H:%M:%S") >> $GITHUB_ENV
          cat $GITHUB_ENV

      - name: Build ${{ matrix.product }} with ${{ matrix.target }}
        run: cd $WORK/$PNAME && make ${{ matrix.target }}

      - name: Build ${{ matrix.product }} with ${{ matrix.target }} check
        run: |
          IFS='-' read -r _ p1 p2 <<< "${{ matrix.target }}"
          TARGET="$WORK/$PNAME/bin/$PNAME-$(echo $p1|sed 's/win/windows/;s/darwin/mac/')-$p2"
          [[ "$p1" == "win" ]] && TARGET="$TARGET.exe"
          ls -alrt $WORK/$PNAME/bin
          [ -f "$TARGET" ] || { echo "Build $PNAME with $p1-$p2 failed" && exit 1; }

      - name: Build ${{ matrix.product }} with ${{ matrix.target }} License and notice process
        run: |
          # License 与 Notice 处理
          cp -rf $WORK/framework/LICENSE $WORK/$PNAME/bin && cat $WORK/framework/NOTICE $WORK/$PNAME/NOTICE > $WORK/$PNAME/bin/NOTICE
          ls -lrt $WORK/$PNAME/bin

      - name: Archive ${{ matrix.product }} with ${{ matrix.target }} files
        run: |
          cd $WORK/$PNAME/bin && mkdir -p config
          IFS='-' read -r _ p1 p2 <<< "${{ matrix.target }}"
          TARGET="$(echo $p1|sed 's/win/windows/;s/darwin/mac/')-$p2"
          [[ "$p1" == "win" ]] && TARGET="$TARGET.exe"

          echo "Archive $PNAME-$p1-$p2 with [ VERSION $VERSION | BUILD_NUMBER $BUILD_NUMBER ] at $BUILD_DATE"
          if [[ "$p1" == "win" ]] || [[ "$p1" == "darwin" ]]; then
            zip -qr $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.zip $PNAME-$TARGET $PNAME.yml LICENSE NOTICE config
          else
            tar zcf $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.tar.gz $TARGET $PNAME.yml LICENSE NOTICE config
          fi
          
      - name: Set ${{ matrix.product }} with ${{ matrix.target }} Upload config
        run: |
          if [ -f $GITHUB_WORKSPACE/.oss.json ] ; then
              echo "no need init the oss json when file is ready."
          else
            cat $GITHUB_WORKSPACE/config/oss.json > $GITHUB_WORKSPACE/.oss.json || true
          fi
          if [ -f $GITHUB_WORKSPACE/.oss.yml ] ; then
            echo "no need init the oss config when file is ready."
          else
            cat $GITHUB_WORKSPACE/config/oss.yml > $GITHUB_WORKSPACE/.oss.yml || true
          fi
          if [[ "$(echo "${{ vars.PRE_RELEASE }}" | tr '[:upper:]' '[:lower:]')" == "true" ]]; then
            grep -wq "pre" $GITHUB_WORKSPACE/.oss.yml || echo "pre: true" >> $GITHUB_WORKSPACE/.oss.yml
          fi
          $GITHUB_WORKSPACE/tools/connect -c $GITHUB_WORKSPACE/.oss.json > /dev/null 2>&1 || true
                      
      - name: Upload ${{ matrix.product }} with ${{ matrix.target }} files
        run: | 
          cd $WORK
          IFS='-' read -r _ p1 p2 <<< "${{ matrix.target }}"
          TARGET="$(echo $p1|sed 's/win/windows/;s/darwin/mac/')-$p2"
          echo "Upload $PNAME with $VERSION-$BUILD_NUMBER at $PWD"
          if [[ "$p1" == "win" ]] || [[ "$p1" == "darwin" ]]; then
           [ -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.zip ] && oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.zip
          else
            [ -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.tar.gz ] && oss upload -c $GITHUB_WORKSPACE/.oss.yml -o -p $PNAME -f $WORK/$PNAME-$VERSION-$BUILD_NUMBER-$TARGET.tar.gz
          fi